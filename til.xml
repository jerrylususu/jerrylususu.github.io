<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIL - Nekonull&#39;s Garden</title>
    <link>https://nekonull.me/</link>
    <description>Recent TIL (Today I Learned) content on Nekonull&#39;s Garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>CC-BY-SA-4.0</copyright>
    <lastBuildDate>Thu, 06 Mar 2025 14:10:10 +0000</lastBuildDate><atom:link href="https://nekonull.me/til.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 PATH 里的脚本是更好的别名</title>
      <link>https://nekonull.me/til/scripts-in-path-can-do-more-than-alias/</link>
      <pubDate>Thu, 06 Mar 2025 14:10:10 +0000</pubDate>
      
      <guid>https://nekonull.me/til/scripts-in-path-can-do-more-than-alias/</guid>
      <description>&lt;p&gt;我自己的 .bashrc 里有不少小工具，但是要每次改起来得写 shell script 着实烦人（即使能用 LLM 写，也免不了来回调试几次才能满意）。读到这篇文章，我才意识到原来可以写脚本放到 script 里，还有一些额外的优势（不用手动 source 重载、用 shell script 之外的任何语言、各种 shell 都能用）。&lt;/p&gt;
&lt;p&gt;src: &lt;a href=&#34;https://evanhahn.com/why-alias-is-my-last-resort-for-aliases/&#34;&gt;https://evanhahn.com/why-alias-is-my-last-resort-for-aliases/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust 的日期库的奇妙实现</title>
      <link>https://nekonull.me/til/rust-date-function-math-magic/</link>
      <pubDate>Sun, 02 Mar 2025 13:51:04 +0000</pubDate>
      
      <guid>https://nekonull.me/til/rust-date-function-math-magic/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;问题：实现一个函数，输入 (year, day-of-year) ，输出 (year, month, day)&lt;/li&gt;
&lt;li&gt;基本做法：硬编码一个月份-日期数组，简单写一个循环&lt;/li&gt;
&lt;li&gt;Rust 的新做法：利用一些神奇的数学关系（仿射函数），可以在无循环的情况下实现判断，核心是这两个公式：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let month = (ordinal + 30) * 10 / 306 + 2;
let days_in_preceding_months = (month + 3) * 306 / 10 - 122;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终优化后的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ordinal_date_to_calendar_date&lt;/span&gt;(year: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, ordinal: &lt;span style=&#34;color:#66d9ef&#34;&gt;u16&lt;/span&gt;) -&amp;gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ordinal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ordinal &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jan_feb_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; is_leap_year(year) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (month_adj, ordinal_adj) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ordinal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; jan_feb_len {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, jan_feb_len)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ordinal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ordinal &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ordinal_adj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ordinal &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8031&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; days_in_preceding_months &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (month &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3917&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3866&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; day &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ordinal &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; days_in_preceding_months;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; month &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; month_adj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (year, month &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; _, day &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; _)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;src: &lt;a href=&#34;https://jhpratt.dev/blog/optimizing-with-novel-calendrical-algorithms/&#34;&gt;https://jhpratt.dev/blog/optimizing-with-novel-calendrical-algorithms/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 Unicode 变体选择器隐藏信息</title>
      <link>https://nekonull.me/til/hide-info-unicode-var-selector/</link>
      <pubDate>Sun, 02 Mar 2025 13:46:14 +0000</pubDate>
      
      <guid>https://nekonull.me/til/hide-info-unicode-var-selector/</guid>
      <description>&lt;p&gt;用 variation selector (VS 变体选择器） 把二进制数据藏在 unicode 字符串里；VS 有 256 个（VS1~VS256），刚好一个 byte 一个，二进制数据甚至不需要特殊处理（例如 base64）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般应用（如浏览器）不会渲染出来&lt;/li&gt;
&lt;li&gt;LLM 可以阅读（很适合做 prompt injecting）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;src: &lt;a href=&#34;https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/&#34;&gt;https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LLMSerp - 把大语言模型当作搜索引擎</title>
      <link>https://nekonull.me/til/llmserp-llm-as-search-engine-page/</link>
      <pubDate>Sun, 02 Mar 2025 09:33:03 +0000</pubDate>
      
      <guid>https://nekonull.me/til/llmserp-llm-as-search-engine-page/</guid>
      <description>&lt;p&gt;LLM 内部已经存储了很多事实性信息。如果通过一些 prompt，让 LLM 输出 [{title, abstract, url}]，就能实现一个搜索引擎。通过把这个&amp;quot;假&amp;quot;搜索引擎和真搜索引擎（例如 Google）的结果混合，Jina.AI 发现可以解决 RAG 中“什么时候需要调用外部搜索”的问题（可以阅读他们的博客文章了解更多信息）。但即使没有这个作用，单纯把 LLM 当作搜索引擎用也是一个很神奇的想法。&lt;/p&gt;
&lt;p&gt;demo: &lt;a href=&#34;https://jina.ai/llm-serp-demo/&#34;&gt;https://jina.ai/llm-serp-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;blog: &lt;a href=&#34;https://jina.ai/news/llm-as-serp-search-engine-result-pages-from-large-language-models&#34;&gt;https://jina.ai/news/llm-as-serp-search-engine-result-pages-from-large-language-models&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>debugpy - VSCode 无配置文件调试 Python</title>
      <link>https://nekonull.me/til/debugpy-vscode/</link>
      <pubDate>Sun, 02 Mar 2025 09:01:58 +0000</pubDate>
      
      <guid>https://nekonull.me/til/debugpy-vscode/</guid>
      <description>&lt;p&gt;VSCode 里用 debugpy 可以直接启动 debug session，无需配置文件（launch.json）。基于 &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/&#34;&gt;Debug Adapter Protocol&lt;/a&gt;，和 Language Server Protocl 类似的调试协议。&lt;/p&gt;
&lt;p&gt;src: &lt;a href=&#34;https://github.com/microsoft/vscode-python-debugger/wiki/No%E2%80%90Config-Debugging&#34;&gt;https://github.com/microsoft/vscode-python-debugger/wiki/No%E2%80%90Config-Debugging&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;via: &lt;a href=&#34;https://www.bitecode.dev/p/whats-up-python-better-packaging&#34;&gt;https://www.bitecode.dev/p/whats-up-python-better-packaging&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>要求 LLM 在完成任务时留下笔记</title>
      <link>https://nekonull.me/til/make-llm-take-notes-when-finishing-task/</link>
      <pubDate>Thu, 28 Nov 2024 13:39:17 +0000</pubDate>
      
      <guid>https://nekonull.me/til/make-llm-take-notes-when-finishing-task/</guid>
      <description>&lt;p&gt;ref: &lt;a href=&#34;https://addyosmani.com/blog/automated-decision-logs/&#34;&gt;https://addyosmani.com/blog/automated-decision-logs/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在项目目录下放一个 &lt;code&gt;fyi.md&lt;/code&gt; 或者 &lt;code&gt;notes.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 prompt 里要求 LLM 完成任务时同时更新此笔记，包含目标、方案和实际执行的行动&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;这看起来是一个显而易见的有效做法，但是之前却没有人提出过！下次使用 cursor 或者其他 LLM 加持的编辑器时我肯定会试试这样做。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>curl 有 LTS 了</title>
      <link>https://nekonull.me/til/curl-has-5-year-lts/</link>
      <pubDate>Sun, 17 Nov 2024 13:27:04 +0000</pubDate>
      
      <guid>https://nekonull.me/til/curl-has-5-year-lts/</guid>
      <description>&lt;p&gt;curl 有 5 年 LTS (Long Time Support) 版本了，不过只有签了商业协议的用户才能使用&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rock-solid.curl.dev/&#34;&gt;https://rock-solid.curl.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;via: &lt;a href=&#34;https://daniel.haxx.se/blog/2024/11/07/rock-solid-curl/&#34;&gt;https://daniel.haxx.se/blog/2024/11/07/rock-solid-curl/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Excel 的自动填充实际上是程序生成</title>
      <link>https://nekonull.me/til/excel-auto-complete-as-program-systhenis/</link>
      <pubDate>Sun, 17 Nov 2024 13:36:00 +0800</pubDate>
      
      <guid>https://nekonull.me/til/excel-auto-complete-as-program-systhenis/</guid>
      <description>&lt;p&gt;原来 Excel 里自动填充是有论文的，底层是实现了程序生成；另外据说 Google Sheets 的自动填充之所以没有微软的好，是因为微软申请了专利，Google 绕不过去。&lt;/p&gt;
&lt;p&gt;Automating String Processing in Spreadsheets Using Input-Output Examples
&lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/popl11-synthesis.pdf&#34;&gt;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/popl11-synthesis.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;via
&lt;a href=&#34;https://danluu.com/ballmer/&#34;&gt;https://danluu.com/ballmer/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
